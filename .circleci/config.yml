version: 2.1

orbs:
  python: circleci/python@1.1.0
  azure-cli: circleci/azure-cli@1.1.0

jobs:
  build:
    docker: &python3-7
      - image: circleci/python:3.7.9
    steps:
      - checkout
      - run:
          name: install pyodbc deps
          command: |
            sudo apt-get update && \
            sudo apt-get install -y curl build-essential g++ apt-transport-https && \
            sudo apt-get install -y unixodbc-dev && \
            sudo apt-get install gnupg -y && \
            gpg --keyserver hkp://keys.gnupg.net --recv-keys 5072E1F5
      - run:
          name: install MSFT ODBC Driver
          command: |
            curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add - && \
            curl https://packages.microsoft.com/config/debian/9/prod.list | sudo tee -a /etc/apt/sources.list.d/mssql-release.list && \
            sudo apt-get update && \
            sudo ACCEPT_EULA=Y apt-get install -y msodbcsql17 odbc-postgresql mssql-tools
      - run:
          name: config for MSFT driver 
          command: |
            export PATH="$PATH:/opt/mssql-tools/bin"
            sed 's/Driver=psql/Driver=\/usr\/lib\/x86_64-linux-gnu\/odbc\/psql/' /etc/odbcinst.ini > /tmp/temp.ini && \
            sudo mv -f /tmp/temp.ini /etc/odbcinst.ini
      - run:
          name: TEMP -- downgrade security
          command: |
            sudo chmod +rwx /etc/ssl/openssl.cnf && \
            # change TLS back to version 1
            sudo sed -i 's/TLSv1.2/TLSv1/g' /etc/ssl/openssl.cnf && \
            # allow weak certificates (certificate signed with SHA1)
            # by downgrading OpenSSL security level from 2 to 1
            sudo sed -i 's/SECLEVEL=2/SECLEVEL=1/g' /etc/ssl/openssl.cnf 
      - run:
          name: install python deps
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r dev_requirements.txt
      # - python/install-packages:
      #     pip-dependency-file: dev_requirements.txt
      #     pkg-manager: pip
      - persist_to_workspace:
          root: .
          paths:
            - .
  unit:
    docker:
      - image: circleci/python:3.7.9
    steps:
      - attach_workspace:
          at: .
      - run:
          name: unit test
          command: |
            sudo apt-get install unixodbc-dev
            . venv/bin/activate
            tox -- -v test/unit
  integration-sqlserver: &sqlserver
    docker:
      - image: circleci/python:3.7.9
      - image: mcr.microsoft.com/mssql/server:2019-latest
        environment:
          ACCEPT_EULA: 'yes'
          MSSQL_SA_PASSWORD: 5atyaNadella
          MSSQL_IP_ADDRESS: 0.0.0.0
    steps:
      - attach_workspace:
          at: .
      - run:
          name: wait for SQL Server container to set up
          command: sleep 30
      - run:
          name: test connection via SQL CMD
          command: |
            export PATH="$PATH:/opt/mssql-tools/bin
            sqlcmd -S 'localhost,1433' -U sa -P 5atyaNadella -Q 'create database blog'
      - run:
          name: Test adapter on SQL Server against dbt-adapter-tests
          command: |
            . venv/bin/activate
            tox -- -v test/integration/sqlserver.dbtspec
  connection-sqlserver:
    <<: *sqlserver
    steps:
      - attach_workspace:
          at: .
      - run: &install-dbt-sqlserver
          name: "install dbt-sqlserver"
          command: sudo python setup.py install
      - run:
          name: wait for SQL Server container to set up
          command: sleep 30
      - run: &prep=connect
          name: prep for connecting
          command: |
            mkdir -p ~/.dbt
            cp test/integration/sample.profiles.yml ~/.dbt/profiles.yml
      - run:
          name: cnxn -- SQL Server - local sql cred
          command: |
            cd test/integration
            dbt compile --target sqlserver_local_userpass
      - run:
          name: cnxn -- SQL Server - local sql cred encrypt
          command: |
            cd test/integration
            dbt compile --target sqlserver_local_encrypt

  integration-azuresql:
    docker:
      - image: circleci/python:3.7.9
    steps:
      - attach_workspace:
          at: .
      - run: *install-dbt-sqlserver
      - run:
          name: wake up serverless db
          command: |
            cd test/integration
            dbt debug --target azuresql_sqlcred
      - run:
          name: Test adapter on Azure SQL against dbt-adapter-tests
          command: |
            . venv/bin/activate
            tox -- -v test/integration/azuresql.dbtspec
  connection-azuresql:
    docker:
      - image: circleci/python:3.7.9
    steps:
      - attach_workspace:
          at: .
      - run: *install-dbt-sqlserver
      - azure-cli/install
      - run: *prep=connect
      - run:
          name: cnxn -- Azure SQL - SQL CRED user+pass
          command: |
            cd test/integration
            dbt compile --target azuresql_sqlcred
      - azure-cli/login-with-user:
          azure-username: DBT_AZURE_USERNAME
          azure-password: DBT_AZURE_PASSWORD
          alternate-tenant: true
          azure-tenant: DBT_AZURE_TENANT
      - run:
          name: cnxn -- Azure SQL - AZ CLI User
          command: |
            cd test/integration
            dbt compile --target azuresql_azcli
      - azure-cli/login-with-service-principal:
          azure-sp: DBT_AZURE_SP_NAME
          azure-sp-password: DBT_AZURE_SP_SECRET
          azure-sp-tenant: DBT_AZURE_TENANT
      - run:
          name: cnxn -- Azure SQL - AZ CLI ServicePrincipal
          command: |
            cd test/integration
            dbt compile --target azuresql_azcli

workflows:
  main:
    jobs:
      - build
      - unit: &build_first
          requires:
            - build
      - connection-azuresql: &build_and_profile
          <<: *build_first
          context:
            - DBT_SYNAPSE_PROFILE
      - connection-sqlserver: *build_and_profile
      - integration-sqlserver: *build_first
      - integration-azuresql: *build_and_profile
